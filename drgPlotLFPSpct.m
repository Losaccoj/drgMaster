%drgPlotLFP

%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
%   plots a number of LFP trials for a certain event type
%
%   Only works with .dg data!
textout='drgPlotLFPSpct'
tic

clear all
close all


%You need to change these

%Enter the directory with a back slash at end
drg.drg_directory='/Users/restrepd/Documents/Projects/Shane/Shane Temp folder/';


%Enter the mat file generated by drgReadWilder
drg_file='100515-623-D13-S+S-iso_drg';
load([drg.drg_directory drg_file '.mat']);

%Enter LFP electrode and session
sessionNo=1;
lfpElectrode=7;

%Enter the event typefor the top and bottom panel
%   Events 1 through 6
%     'TStart'    'OdorOn'    'Hit'    'HitE'    'S+'    'S+E'
%   Events 7 through 13
%     'Miss'    'MissE'    'CR'    'CRE'    'S-'    'S-E'    'FA'
%   Events 14 through 19
%     'FAE'    'Reinf'    'L+'    'L-' 'S+TStart' 'S-TStart'
%   'S+TStart' = 18
evTypeNo1=1;
evTypeNo2=1;

%Enter trials for top and bottom panel
firstTr1=1;
lastTr1=1;

if firstTr1<1
    firstTr1=1;
end

% firstTr2=0;
% lastTr2=105;

firstTr2=60;
lastTr2=60;

if firstTr2<1
    firstTr2=1;
end


%Which bandpass?
bandpass=8;
switch bandpass
    case 1 %Theta 2-12
        fpass=[2 12];
        freqs=[4:2:12];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=0.5;
    case 2 %Beta 15-30
        fpass=[15 30];
        freqs=[15:2:30];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=0.1;
    case 3 %Gamma1 35-65
        fpass=[35 65];
        freqs=[35:2:65];
        %freqs=[35:10:65];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=0.5;
    case 4 %Gamma2 65-95
        fpass=[65 95];
        freqs=[65:2:95];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=0.1;
    case 5 %Gamma 35-95
        fpass=[35 95];
        freqs=[35:3:95];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=0.1;
    case 6 %Beta Gamma 10-95
        fpass=[10 95];
        freqs=[10:5:95];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=0.5;
    case 7 %Theta, beta, gamma 1-95
        fpass=[3 95];
        freqs=[4:2:96];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=2;
    case 8 %Spikes 300-3000
        fpass=[300 3000];
        freqs=[4:2:96];
        movingwin=[0.5, 0.05];
        filter=1;
        skip_start=2;
end

%These are directories used by Diego
%directory='/Users/restrepd/Documents/Projects/DanielWilder/Forward/';

%drg.drg_directory='/Users/restrepd/Documents/Projects/Justin/OiS Wilder test/';

%drg.drg_directory='/Users/restrepd/Documents/Projects/Ananawakebehaving/allfiles/';


% drg.drg_directory='/Users/restrepd/Documents/Projects/Ananawakebehaving/gogo/';
% % drg.drg_directory='/Users/restrepd/Documents/Projects/Justin/OiS/rc/';
% drg.drg_file='drg_files';

%drg.drg_directory='/Users/restrepd/Documents/Projects/Justin/no jt/';
figureNo=2;





% drg.maxLFP=3900;
% drg.minLFP=100;
% drg.delta_max_min_out=0.6;



pre_fft_start=-1.5;
pre_fft_end=0;

post_fft_start=0.25;
post_fft_end=1.75;



if (evTypeNo1>17)||(evTypeNo2>17)||(evTypeNo1==1)||(evTypeNo2==1)
    drg.time_pre=-2;
end

% %Enter trials
% firstTr1=0;
% lastTr1=40;
% 
% if firstTr1<1
%     firstTr1=1;
% end
% 
% % firstTr2=0;
% % lastTr2=105;
% 
% firstTr2=length(drg.session(sessionNo).trial_start)-40;
% lastTr2=length(drg.session(sessionNo).trial_start);
% 
% if firstTr2<1
%     firstTr2=1;
% end

no_trials=length(drg.session(sessionNo).trial_start)

if lastTr1>length(drg.session(sessionNo).trial_start)
    lastTr1=length(drg.session(sessionNo).trial_start);
end

if lastTr2>length(drg.session(sessionNo).trial_start)
    lastTr2=length(drg.session(sessionNo).trial_start);
end

% %Which bandpass?
% bandpass=8;
% switch bandpass
%     case 1 %Theta 2-12
%         fpass=[2 12];
%         freqs=[4:2:12];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=0.5;
%     case 2 %Beta 15-30
%         fpass=[15 30];
%         freqs=[15:2:30];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=0.1;
%     case 3 %Gamma1 35-65
%         fpass=[35 65];
%         freqs=[35:2:65];
%         %freqs=[35:10:65];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=0.5;
%     case 4 %Gamma2 65-95
%         fpass=[65 95];
%         freqs=[65:2:95];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=0.1;
%     case 5 %Gamma 35-95
%         fpass=[35 95];
%         freqs=[35:3:95];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=0.1;
%     case 6 %Beta Gamma 10-95
%         fpass=[10 95];
%         freqs=[10:5:95];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=0.5;
%     case 7 %Theta, beta, gamma 1-95
%         fpass=[3 95];
%         freqs=[4:2:96];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=2;
%     case 8 %Spikes 300-3000
%         fpass=[300 3000];
%         freqs=[4:2:96];
%         movingwin=[0.5, 0.05];
%         filter=1;
%         skip_start=2;
% end



% maxLFP=3900;
% minLFP=100;
% delta_max_min_out=0.3;

%test_system=1;

%This is not using chronux (chronux would be 1)
% if iscell(drg.fls)
%     jt_f=drg.fls{sessionNo};
% else
%     jt_f=drg.fls;
% end
% 
% if drg.session(sessionNo).dgordra==1
%     dgfile=[drg.drg_directory jt_f(10:end-4) '.dra'];
% else
%     dgfile=[drg.drg_directory jt_f(10:end-4) '.dg'];
% end

dgfile=[drg.drg_directory drg_file(1:end-4) '.dg'];

%This is dg, open file
fdg=fopen(dgfile,'r');
no_unit16_per_ch=floor(drg.draq_p.sec_per_trigger*drg.draq_p.ActualRate);
data_dg=fread(fdg,no_unit16_per_ch*drg.draq_p.no_chans*drg.draq_d.noTrials,'uint16');
fclose(fdg)

bpFilt = designfilt('bandpassiir','FilterOrder',20, ...
    'HalfPowerFrequency1',fpass(1),'HalfPowerFrequency2',fpass(2), ...
    'SampleRate',drg.draq_p.ActualRate);


window=movingwin(1)*drg.draq_p.ActualRate;
noverlap=window-movingwin(2)*drg.draq_p.ActualRate;



tic

% %Choose chronux or mine
% is_chronux=handles.drs_p.is_chronux;
%
% %Enter params for chronux
% %Enter paprams
% params.Fs=handles.draq_p.ActualRate;
% params.fpass=handles.lfp.fpass;
% params.tapers=[5 9];
% params.err=0;
% params.trialave=1;
%
% %Enter movingwin
% movingwin=handles.lfp.movingwin;
%
% L = (handles.p.time_post+handles.p.time_pre)*params.Fs;     % Length of signal

noch=drg.draq_p.no_spike_ch;






%Get the LFP for the top
evRange1=find( (drg.session(sessionNo).events(evTypeNo1).times>drg.draq_d.t_trial(firstTr1))&...
    (drg.session(sessionNo).events(evTypeNo1).times<(drg.draq_d.t_trial(lastTr1)+drg.draq_p.sec_per_trigger) ) );


% %This is dg
% bytes_per_native=2;     %Note: Native is unit16
% size_per_ch_bytes=handles.draq_p.sec_per_trigger*handles.draq_p.ActualRate*bytes_per_native;
% no_unit16_per_ch=size_per_ch_bytes/bytes_per_native;


% %Get the LFP for the top
% evTypeNo=get(handles.drsDoSpikeLFPEvent1,'Value');
% evRange=find( (handles.d.eventstamps(:,evTypeNo)>handles.draq_d.t_trial(handles.drs_p.firstTr1))&...
%     (handles.d.eventstamps(:,evTypeNo)<(handles.draq_d.t_trial(handles.drs_p.lastTr1)+handles.draq_p.sec_per_trigger) ) );

%n=0
noEvs1=0;
allnoEvs1=0;


lfpno=lfpElectrode;

for evNo=evRange1(1):evRange1(end)
    
    evNo
    
    excludeTrial=drgExcludeTrialLFP(drg,lfpno,drg.session(sessionNo).events(evTypeNo1).times(evNo),sessionNo);
    
    if excludeTrial==0
        
        allnoEvs1=allnoEvs1+1;
        
        
        
        %
        %                 %Get the data for this LFP
        %                 trial_no=find(handles.draq_d.t_trial<handles.d.eventstamps(evNo,evTypeNo),1,'last');
        %                 trial_offset=handles.draq_p.no_chans*size_per_ch_bytes*(trial_no-1);
        %                 fseek(handles.drs_p.fid, (lfpno-1)*size_per_ch_bytes+trial_offset, 'bof');
        %                 data=fread(handles.drs_p.fid,no_unit16_per_ch,'uint16');
        %
        %
        %                 %Get the data for the fast fourier transform
        %                 ii_from=floor(((handles.d.eventstamps(evNo,evTypeNo)-handles.draq_d.t_trial(trial_no))-handles.p.time_pre)...
        %                     *handles.draq_p.ActualRate+1);
        %                 ii_to=floor(((handles.d.eventstamps(evNo,evTypeNo)-handles.draq_d.t_trial(trial_no))...
        %                     +handles.p.time_post)*handles.draq_p.ActualRate);
        %                 ii_zero1=floor(((handles.d.eventstamps(evNo,evTypeNo)-handles.draq_d.t_trial(trial_no)))...
        %                     *handles.draq_p.ActualRate+1);
        %
        %
        %                 dataforch=[];
        %                 if ii_to<=length(data)
        %                     if (ii_from<1)
        %                         dataforch=[zeros(-ii_from+1,1);data(1:ii_to)];
        %                         ii_zero1=ii_zero1-ii_from;
        %                         ii_from=1;
        %                     else
        %                         dataforch=data(ii_from:ii_to);
        %                     end
        %                 else
        %                     dataforch=[dataforch; data(ii_from:length(data));zeros(lngthd-(length(data)-ii_from)-1,1)];
        %                 end
        %
        %
        %
        %
        %
        %
        %
        %             if ((sum(dataforch>handles.lfp.maxLFP)+sum(dataforch<handles.lfp.minLFP))/handles.draq_p.ActualRate)<handles.lfp.delta_max_min_out
        %                 if noEvs1==0
        %                     lngthd=length(dataforch);
        %                     dataforallch=dataforch;
        %                     noEvs1=1;
        %                 else
        %                     noEvs1=noEvs1+1;
        %                     if length(dataforch)>lngthd
        %                         dataforch=dataforch(1:lngthd);
        %                     end
        %                     if length(dataforch)<lngthd
        %                         lnch=length(dataforch);
        %                         while lnch<lngthd
        %                             dataforch=[dataforch; 0];
        %                             lnch=lnch+1;
        %                         end
        %                     end
        %                     dataforallch(:,noEvs1)=dataforch;
        %                 end
        %             end
        %             %end
        %Get the data for this LFP
%         trial_no=find(drg.draq_d.t_trial<drg.session(sessionNo).events(evTypeNo1).times(evNo),1,'last');
%         trial_offset=drg.draq_p.no_chans*size_per_ch_bytes*(trial_no-1);
%         fseek(fdg, (lfpno-1)*size_per_ch_bytes+trial_offset, 'bof');
%         data=fread(fdg,no_unit16_per_ch,'uint16');
        
        %Get the data for this LFP
        trial_no=find(drg.draq_d.t_trial<drg.session(sessionNo).events(evTypeNo1).times(evNo),1,'last');
        data_this_trial=data_dg(floor(drg.draq_p.ActualRate*drg.draq_p.sec_per_trigger*drg.draq_p.no_chans*(trial_no-1)+1):...
        floor(drg.draq_p.ActualRate*drg.draq_p.sec_per_trigger*drg.draq_p.no_chans*trial_no)-2000);
        data=data_this_trial(floor((lfpno-1)*drg.draq_p.ActualRate*drg.draq_p.sec_per_trigger):floor(lfpno*drg.draq_p.ActualRate*drg.draq_p.sec_per_trigger));
     
        
        %Get the data for the fast fourier transform
        ii_from=floor(((drg.session(sessionNo).events(evTypeNo1).times(evNo)-drg.draq_d.t_trial(trial_no))+drg.time_pre)...
            *drg.draq_p.ActualRate+1);
        ii_to=floor(((drg.session(sessionNo).events(evTypeNo1).times(evNo)-drg.draq_d.t_trial(trial_no))...
            +drg.time_post)*drg.draq_p.ActualRate);
        ii_zero1=floor(((drg.session(sessionNo).events(evTypeNo1).times(evNo)-drg.draq_d.t_trial(trial_no)))...
            *drg.draq_p.ActualRate+1);
        
        
        dataforch=[];
        if ii_to<=length(data)
            if (ii_from<1)
                dataforch=[zeros(-ii_from+1,1);data(1:ii_to)];
                ii_zero1=ii_zero1-ii_from;
                ii_from=1;
            else
                dataforch=data(ii_from:ii_to);
            end
        else
            dataforch=[dataforch; data(ii_from:length(data));zeros(lngthd-(length(data)-ii_from)-1,1)];
        end
        
        
        
        
        
        %end
        
        if ((sum(dataforch>drg.maxLFP)+sum(dataforch<drg.minLFP))/drg.draq_p.ActualRate)<drg.delta_max_min_out
            if noEvs1==0
                lngthd=length(dataforch);
                dataforallch=dataforch;
                noEvs1=1;
            else
                noEvs1=noEvs1+1;
                if length(dataforch)>lngthd
                    dataforch=dataforch(1:lngthd);
                end
                if length(dataforch)<lngthd
                    lnch=length(dataforch);
                    while lnch<lngthd
                        dataforch=[dataforch; 0];
                        lnch=lnch+1;
                    end
                end
                dataforallch(:,noEvs1)=dataforch;
            end
        end
    end
end


if noEvs1>0
    [S1,f1,t1,P1]=drgspectrogram(dataforallch,movingwin,freqs,drg);
end

no_events_included_in1=noEvs1
all_events_in_1=allnoEvs1



%Get the LFP for the bottom

evRange2=find( (drg.session(sessionNo).events(evTypeNo2).times>drg.draq_d.t_trial(firstTr2))&...
    (drg.session(sessionNo).events(evTypeNo2).times<(drg.draq_d.t_trial(lastTr2)+drg.draq_p.sec_per_trigger) ) );


%n=0

noEvs2=0;
allnoEvs2=0;


for evNo=evRange2(1):evRange2(end)
    
    evNo
    
    
    excludeTrial=drgExcludeTrialLFP(drg,lfpno,drg.session(sessionNo).events(evTypeNo2).times(evNo),sessionNo);
    
    if excludeTrial==0
        allnoEvs2=allnoEvs2+1;
        
        
        
        
        %Get the data for this LFP
%         trial_no=find(drg.draq_d.t_trial<drg.session(sessionNo).events(evTypeNo2).times(evNo),1,'last');
%         trial_offset=drg.draq_p.no_chans*size_per_ch_bytes*(trial_no-1);
%         fseek(fdg, (lfpno-1)*size_per_ch_bytes+trial_offset, 'bof');
%         data=fread(fdg,no_unit16_per_ch,'uint16');
        
        %Get the data for this LFP
        data=[];
        trial_no=find(drg.draq_d.t_trial<drg.session(sessionNo).events(evTypeNo2).times(evNo),1,'last');
        data=data_dg(floor(drg.draq_p.ActualRate*drg.draq_p.sec_per_trigger*drg.draq_p.no_chans*(trial_no-1)+1):...
            floor(drg.draq_p.ActualRate*drg.draq_p.sec_per_trigger*drg.draq_p.no_chans*trial_no)-2000);
        
        
        %Get the data for the fast fourier transform
        ii_from=floor(((drg.session(sessionNo).events(evTypeNo2).times(evNo)-drg.draq_d.t_trial(trial_no))+drg.time_pre)...
            *drg.draq_p.ActualRate+1);
        ii_to=floor(((drg.session(sessionNo).events(evTypeNo2).times(evNo)-drg.draq_d.t_trial(trial_no))...
            +drg.time_post)*drg.draq_p.ActualRate);
        ii_zero1=floor(((drg.session(sessionNo).events(evTypeNo2).times(evNo)-drg.draq_d.t_trial(trial_no)))...
            *drg.draq_p.ActualRate+1);
        
        
        dataforch=[];
        if ii_to<=length(data)
            if (ii_from<1)
                dataforch=[zeros(-ii_from+1,1);data(1:ii_to)];
                ii_zero1=ii_zero1-ii_from;
                ii_from=1;
            else
                dataforch=data(ii_from:ii_to);
            end
        else
            dataforch=[dataforch; data(ii_from:length(data));zeros(lngthd-(length(data)-ii_from)-1,1)];
        end
        
        
        %                 dataforch=[];
        %                 if (ii_from<1)
        %                     dataforch=[zeros(-ii_from-1,1);data(1:ii_to)];
        %                 else
        %                     if (ii_to>lngthd)
        %                         dataforch=[data(ii_from:end);zeros(ii_to-lngthd-1,1)];
        %                     else
        %                        dataforch=[data(ii_from:ii_to)];
        %                     end
        %                 end
        
        
        
        
        
        if ((sum(dataforch>drg.maxLFP)+sum(dataforch<drg.minLFP))/drg.draq_p.ActualRate)<drg.delta_max_min_out
            
            if noEvs2==0
                lngthd=length(dataforch);
                dataforallch=dataforch;
                noEvs2=1;
            else
                noEvs2=noEvs2+1;
                if length(dataforch)>lngthd
                    dataforch=dataforch(1:lngthd);
                end
                if length(dataforch)<lngthd
                    lnch=length(dataforch);
                    while lnch<lngthd
                        dataforch=[dataforch; 0];
                        lnch=lnch+1;
                    end
                end
                dataforallch(:,noEvs2)=dataforch;
            end
        end
        %end
    end
    
end


if noEvs2>0
    [S2,f2,t2,P2]=drgspectrogram(dataforallch,movingwin,freqs,drg);
end

no_events_included_in2=noEvs2
all_events_in_2=allnoEvs2

hFig1=figure(figureNo)

set(hFig1, 'units','normalized','position',[.15 .45 .7 .45]);

if (noEvs1>=1)&(noEvs2>=1)
    cminlogP=min(min(min(10*log10(P1))),min(min(10*log10(P2))))
    cmaxlogP=max(max(max(10*log10(P1))),max(max(10*log10(P2))))
end

if (noEvs1>=1)&(noEvs2<1)
    cminlogP=min(min(10*log10(P1)))
    cmaxlogP=max(max(10*log10(P1)))
end

if (noEvs1<1)&(noEvs2>=1)
    cminlogP=min(min(10*log10(P2)))
    cmaxlogP=max(max(10*log10(P2)))
end

height=0.35;


s_handle1=subplot('Position', [0.1 0.58 0.55 height]);
cla

%cmaxlogP=6.4077e+04;
%cminlogP=6.1870;

%Note that because of how surf works the FFT for all frequencies except for
%the last one are being shown (not a big deal, but....)

if (noEvs1>=1)==1
    %logP1=10*log10(P1);
    %P1(:,find(t1==2.5))=min(min(P1));
    surf(t1+drg.time_pre,f1,10*log10(P1),'edgecolor','none');
    %axis([min(t2) max(t2) min(f2) max(f2) 0 1 cminlogP cmaxlogP])
    axis tight;
    caxis([cminlogP cmaxlogP]);
    shading interp;
    colorbar;
    view(0,90);
    xlabel('Time (Seconds)'); ylabel('Hz');
    title('Event 1')
%     evNo=get(handles.drsDoSpikeLFPEvent1,'Value');
%     strs_ev=get(handles.drsDoSpikeLFPEvent1,'String');
%     set(handles.topLbl,'String',strs_ev(evNo));
    
%     P1tot=mean(log(P1),1);
%     t_here=find((t1+drg.time_pre>-1.2)&(t1+drg.time_pre<-0.2));
%     Powerbefore=mean(P1tot(t_here))
%     
%     for ii=1:5
%         t_here=find((t1+drg.time_pre>(ii-1)*0.5-0.1)&(t1+drg.time_pre<((ii-1)*0.5+0.25)));
%         [maxpower(ii), maxii]=max(P1tot(t_here(1):t_here(end)));
%         if maxii==1
%             maxpowerii(ii)=(P1tot(t_here(maxii))+P1tot(t_here(maxii+1))+P1tot(t_here(maxii+2)) )/3;
%         else
%             if maxii==length(t_here)
%                 maxpowerii(ii)=(P1tot(t_here(maxii-2))+P1tot(t_here(maxii-1))+P1tot(t_here(maxii)) )/3;
%             else
%                 maxpowerii(ii)=(P1tot(t_here(maxii-1))+P1tot(t_here(maxii))+P1tot(t_here(maxii+1)) )/3;
%             end
%         end
%         hold on
%         
%     end
%     
%     
%     max_top_peak=maxpower;
%     
%     each_peak_50ms_top=maxpowerii
    
    
end



s_handle2=subplot('Position', [0.1 0.1 0.55 height]);
cla


if (noEvs2>=1)
    %logP2=10*log10(P2);
    %P2(:,find(t2==2.5))=min(min(P2));
    surf(t2+drg.time_pre,f2,10*log10(P2),'edgecolor','none');
    %axis([min(t2) max(t2) min(f2) max(f2) 0 1 cminlogP cmaxlogP])
    axis tight;
    caxis([cminlogP cmaxlogP]);
    shading interp;
    colorbar;
    view(0,90);
    xlabel('Time (Seconds)'); ylabel('Hz');
    title('Event 2')
%     evNo=get(handles.drsDoSpikeLFPEvent2,'Value');
%     strs_ev=get(handles.drsDoSpikeLFPEvent2,'String');
%     set(handles.bottomLbl,'String',strs_ev(evNo));
    
%     P2tot=mean(log(P2),1);
%     t_here=find((t2+drg.time_pre>-1.2)&(t2+drg.time_pre<-0.2));
%     Powerbefore=mean(P2tot(t_here))
%     
%     for ii=1:5
%         t_here=find((t2+drg.time_pre>(ii-1)*0.5-0.1)&(t2+drg.time_pre<((ii-1)*0.5+0.25)));
%         [maxpower(ii), maxii]=max(P2tot(t_here(1):t_here(end)));
%         if maxii==1
%             maxpowerii(ii)=(P2tot(t_here(maxii))+P2tot(t_here(maxii+1))+P2tot(t_here(maxii+2)) )/3;
%         else
%             if maxii==length(t_here)
%                 maxpowerii(ii)=(P2tot(t_here(maxii-2))+P2tot(t_here(maxii-1))+P2tot(t_here(maxii)) )/3;
%             else
%                 maxpowerii(ii)=(P2tot(t_here(maxii-1))+P2tot(t_here(maxii))+P2tot(t_here(maxii+1)) )/3;
%             end
%         end
%         hold on
%         
%     end
%     
%     
%     max_top_peak=maxpower;
%     
%     each_peak_50ms_top=maxpowerii
end


s_handle3=subplot('Position', [0.7 0.1 0.25 0.8]);
hold on

ii_pre_start=find(t1+drg.time_pre>pre_fft_start,1,'first');
ii_pre_end=find(t1+drg.time_pre<pre_fft_end,1,'last');

ii_post_start=find(t2+drg.time_pre>post_fft_start,1,'first');
ii_post_end=find(t2+drg.time_pre<post_fft_end,1,'last');

plot(f1,mean(10*log10(P1(:,ii_pre_start:ii_pre_end)),2),'-','Color',[0.3 0.3 0.7])
plot(f1,mean(10*log10(P1(:,ii_post_start:ii_post_end)),2),'-b','LineWidth',2)

plot(f2,mean(10*log10(P2(:,ii_pre_start:ii_pre_end)),2),'-','Color',[0.7 0.3 0.3])
plot(f2,mean(10*log10(P2(:,ii_post_start:ii_post_end)),2),'-r','LineWidth',2)

title('Power (dB) as a function of frequency')
xlabel('Frequency (Hz)')
ylabel('Power (dB)')
legend('Pre event 1','Post event 1','Pre event 2','Post event 2')


toc
